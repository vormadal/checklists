//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param type (optional) 
     * @param isComplete (optional) 
     * @param pageSize (optional) 
     * @param pageNo (optional) 
     * @return Success
     */
    getChecklists(type: ChecklistType | undefined, isComplete: boolean | undefined, pageSize: number | undefined, pageNo: number | undefined, cancelToken?: CancelToken): Promise<ChecklistDto[]> {
        let url_ = this.baseUrl + "/Checklists?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (isComplete === null)
            throw new Error("The parameter 'isComplete' cannot be null.");
        else if (isComplete !== undefined)
            url_ += "isComplete=" + encodeURIComponent("" + isComplete) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChecklists(_response);
        });
    }

    protected processGetChecklists(response: AxiosResponse): Promise<ChecklistDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChecklistDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ChecklistDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChecklistDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createChecklist(body: CreateChecklistDto | undefined, cancelToken?: CancelToken): Promise<ChecklistDto> {
        let url_ = this.baseUrl + "/Checklists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateChecklist(_response);
        });
    }

    protected processCreateChecklist(response: AxiosResponse): Promise<ChecklistDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = ChecklistDto.fromJS(resultData201);
            return Promise.resolve<ChecklistDto>(result201);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChecklistDto>(null as any);
    }

    /**
     * @return Success
     */
    getChecklistById(id: number, cancelToken?: CancelToken): Promise<ChecklistDetailsDto> {
        let url_ = this.baseUrl + "/Checklists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChecklistById(_response);
        });
    }

    protected processGetChecklistById(response: AxiosResponse): Promise<ChecklistDetailsDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChecklistDetailsDto.fromJS(resultData200);
            return Promise.resolve<ChecklistDetailsDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChecklistDetailsDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateChecklist(id: number, body: UpdateChecklistDto | undefined, cancelToken?: CancelToken): Promise<ChecklistDto> {
        let url_ = this.baseUrl + "/Checklists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateChecklist(_response);
        });
    }

    protected processUpdateChecklist(response: AxiosResponse): Promise<ChecklistDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChecklistDto.fromJS(resultData200);
            return Promise.resolve<ChecklistDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChecklistDto>(null as any);
    }

    /**
     * @return No Content
     */
    deleteChecklist(id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/Checklists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteChecklist(_response);
        });
    }

    protected processDeleteChecklist(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createChecklistItem(checklistId: number, body: CreateChecklistItemDto | undefined, cancelToken?: CancelToken): Promise<ChecklistItemDto> {
        let url_ = this.baseUrl + "/Checklists/{checklistId}/items";
        if (checklistId === undefined || checklistId === null)
            throw new Error("The parameter 'checklistId' must be defined.");
        url_ = url_.replace("{checklistId}", encodeURIComponent("" + checklistId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateChecklistItem(_response);
        });
    }

    protected processCreateChecklistItem(response: AxiosResponse): Promise<ChecklistItemDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = ChecklistItemDto.fromJS(resultData201);
            return Promise.resolve<ChecklistItemDto>(result201);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChecklistItemDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateChecklistItem(checklistId: number, id: number, body: UpdateChecklistItemDto | undefined, cancelToken?: CancelToken): Promise<ChecklistItemDto> {
        let url_ = this.baseUrl + "/Checklists/{checklistId}/items/{id}";
        if (checklistId === undefined || checklistId === null)
            throw new Error("The parameter 'checklistId' must be defined.");
        url_ = url_.replace("{checklistId}", encodeURIComponent("" + checklistId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateChecklistItem(_response);
        });
    }

    protected processUpdateChecklistItem(response: AxiosResponse): Promise<ChecklistItemDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChecklistItemDto.fromJS(resultData200);
            return Promise.resolve<ChecklistItemDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChecklistItemDto>(null as any);
    }

    /**
     * @return No Content
     */
    deleteChecklistItem(checklistId: number, id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/Checklists/{checklistId}/items/{id}";
        if (checklistId === undefined || checklistId === null)
            throw new Error("The parameter 'checklistId' must be defined.");
        url_ = url_.replace("{checklistId}", encodeURIComponent("" + checklistId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteChecklistItem(_response);
        });
    }

    protected processDeleteChecklistItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    copyChecklist(id: number, body: CopyChecklistDto | undefined, cancelToken?: CancelToken): Promise<ChecklistDto> {
        let url_ = this.baseUrl + "/Checklists/{id}/copy";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCopyChecklist(_response);
        });
    }

    protected processCopyChecklist(response: AxiosResponse): Promise<ChecklistDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = ChecklistDto.fromJS(resultData201);
            return Promise.resolve<ChecklistDto>(result201);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChecklistDto>(null as any);
    }
}

export class ChecklistDetailsDto implements IChecklistDetailsDto {
    id!: number;
    createdOn!: Date;
    modifiedOn!: Date;
    title!: string;
    items!: ChecklistItemDto[];
    isComplete!: boolean;
    type!: ChecklistType;

    constructor(data?: IChecklistDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.modifiedOn = _data["modifiedOn"] ? new Date(_data["modifiedOn"].toString()) : <any>undefined;
            this.title = _data["title"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ChecklistItemDto.fromJS(item));
            }
            this.isComplete = _data["isComplete"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ChecklistDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChecklistDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        data["title"] = this.title;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["isComplete"] = this.isComplete;
        data["type"] = this.type;
        return data;
    }
}

export interface IChecklistDetailsDto {
    id: number;
    createdOn: Date;
    modifiedOn: Date;
    title: string;
    items: ChecklistItemDto[];
    isComplete: boolean;
    type: ChecklistType;
}

export class ChecklistDto implements IChecklistDto {
    id!: number;
    createdOn!: Date;
    modifiedOn!: Date;
    title!: string;
    isComplete!: boolean;
    type!: ChecklistType;

    constructor(data?: IChecklistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.modifiedOn = _data["modifiedOn"] ? new Date(_data["modifiedOn"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.isComplete = _data["isComplete"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ChecklistDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChecklistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["modifiedOn"] = this.modifiedOn ? this.modifiedOn.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["isComplete"] = this.isComplete;
        data["type"] = this.type;
        return data;
    }
}

export interface IChecklistDto {
    id: number;
    createdOn: Date;
    modifiedOn: Date;
    title: string;
    isComplete: boolean;
    type: ChecklistType;
}

export class ChecklistItemDto implements IChecklistItemDto {
    id!: number;
    order!: number;
    title!: string;
    isComplete!: boolean;
    checklistId!: number;

    constructor(data?: IChecklistItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.order = _data["order"];
            this.title = _data["title"];
            this.isComplete = _data["isComplete"];
            this.checklistId = _data["checklistId"];
        }
    }

    static fromJS(data: any): ChecklistItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChecklistItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["order"] = this.order;
        data["title"] = this.title;
        data["isComplete"] = this.isComplete;
        data["checklistId"] = this.checklistId;
        return data;
    }
}

export interface IChecklistItemDto {
    id: number;
    order: number;
    title: string;
    isComplete: boolean;
    checklistId: number;
}

export enum ChecklistType {
    Checklist = "Checklist",
    Template = "Template",
}

export class CopyChecklistDto implements ICopyChecklistDto {
    newTitle?: string | undefined;
    newType?: ChecklistType;

    constructor(data?: ICopyChecklistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newTitle = _data["newTitle"];
            this.newType = _data["newType"];
        }
    }

    static fromJS(data: any): CopyChecklistDto {
        data = typeof data === 'object' ? data : {};
        let result = new CopyChecklistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newTitle"] = this.newTitle;
        data["newType"] = this.newType;
        return data;
    }
}

export interface ICopyChecklistDto {
    newTitle?: string | undefined;
    newType?: ChecklistType;
}

export class CreateChecklistDto implements ICreateChecklistDto {
    title!: string;
    type!: ChecklistType;

    constructor(data?: ICreateChecklistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CreateChecklistDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateChecklistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }
}

export interface ICreateChecklistDto {
    title: string;
    type: ChecklistType;
}

export class CreateChecklistItemDto implements ICreateChecklistItemDto {
    title!: string;
    isComplete!: boolean;
    order!: number;

    constructor(data?: ICreateChecklistItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.isComplete = _data["isComplete"];
            this.order = _data["order"];
        }
    }

    static fromJS(data: any): CreateChecklistItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateChecklistItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["isComplete"] = this.isComplete;
        data["order"] = this.order;
        return data;
    }
}

export interface ICreateChecklistItemDto {
    title: string;
    isComplete: boolean;
    order: number;
}

export class UpdateChecklistDto implements IUpdateChecklistDto {
    title!: string;

    constructor(data?: IUpdateChecklistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): UpdateChecklistDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateChecklistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        return data;
    }
}

export interface IUpdateChecklistDto {
    title: string;
}

export class UpdateChecklistItemDto implements IUpdateChecklistItemDto {
    order!: number;
    title!: string;
    isComplete!: boolean;

    constructor(data?: IUpdateChecklistItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.order = _data["order"];
            this.title = _data["title"];
            this.isComplete = _data["isComplete"];
        }
    }

    static fromJS(data: any): UpdateChecklistItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateChecklistItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["order"] = this.order;
        data["title"] = this.title;
        data["isComplete"] = this.isComplete;
        return data;
    }
}

export interface IUpdateChecklistItemDto {
    order: number;
    title: string;
    isComplete: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}